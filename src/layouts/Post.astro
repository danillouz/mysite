---
import PageLayout from "@layouts/Page.astro"
import Window from "@components/Window.astro"
import ToC from "@components/ToC.astro"
import Time from "@components/Time.astro"
import Tag from "@components/Tag.astro"
import Webmentions from "@components/Webmentions"
import { sortTagsAlphabetically } from "@utils/tags"

import type { Frontmatter } from "@types"

interface Props {
  frontmatter: Frontmatter
  headings: { depth: number; slug: string; text: string }[]
  children: any
}

const {
  frontmatter: {
    title,
    description,
    tags,
    pubDate,
    updatedDate,
    heroImage,
    heroImageAlt,
    readingTime,
    url,
  },
  headings,
} = Astro.props

const tagsSorted = sortTagsAlphabetically(tags)

const headingIds = [
  // Used in ToC.
  "introduction",

  ...headings.map((h) => h.slug),

  // Used in ToC.
  "webmentions",
]

const makePostLink = (baseUrl: string, postUrl: string): string => {
  const postLink = new URL(postUrl, baseUrl)
  return postLink.toString()
}

const makeIssueLink = (baseUrl: string, postUrl: string): string => {
  const postLink = new URL(postUrl, baseUrl)

  const query = new URLSearchParams()
  query.append("title", title)
  query.append("body", `Hi! I read your [post](${postLink}) and ...`)

  const url = new URL(`https://github.com/danillouz/mysite/issues/new?${query}`)
  return url.toString()
}
---

<PageLayout title={title} description={description}>
  <Window
    tabs={[
      { href: "/posts", title: "Posts" },
      { href: "/posts/tags", title: "Tags" },
      { title: `Posts > ${title}`, isActive: true },
    ]}
  >
    <aside slot="aside" class="hidden 2xl:block absolute top-28 -left-60">
      <toc-highlight data-heading-ids={headingIds}>
        <ToC>
          <>
            <!-- Custom heading to easily go to top of post. -->
            <a
              href={`${url}#introduction`}
              id="toc-introduction"
              class="block p-1 truncate focusable"
              data-indent="0"
              title="Introduction"
            >
              Introduction
            </a>

            {
              headings.map((h) => {
                const indent = h.depth - 2
                return (
                  <a
                    href={`${url}#${h.slug}`}
                    id={`toc-${h.slug}`}
                    class="block p-1 truncate focusable"
                    data-indent={indent > 0 ? indent : 0}
                    title={h.text}
                  >
                    {h.text}
                  </a>
                )
              })
            }

            <!-- Custom webmentions heading. -->
            <a
              href={`${url}#webmentions`}
              id="toc-webmentions"
              class="block p-1 truncate focusable"
              data-indent="0"
              title="Webmentions"
            >
              Webmentions
            </a>
          </>
        </ToC>
      </toc-highlight>
    </aside>

    <div class="page-wrapper">
      <article class="mx-auto max-w-2xl">
        <header class="flex flex-col">
          <h1 class="page-heading mt-6">
            {title}
          </h1>

          <p class="order-first page-subtext">
            {
              pubDate && (
                <>
                  <Time datetime={pubDate} /> &bull;
                </>
              )
            }

            {readingTime}
          </p>
        </header>

        <div
          class:list={[
            // Prose colors are set in `tailwind.config.cjs` in
            // `theme.extend.typography`, but additional/custom
            // styles are to be set here:

            // Base styles.
            "mt-8 break-words prose prose-base dark:prose-invert prose-danos",

            // Links.
            "prose-a:font-normal prose-a:underline-offset-2 prose-a:decoration-1 focus:prose-a:focusable",

            // Images.
            "prose-img:rounded-sm prose-figcaption:text-center prose-figcaption:font-sans",

            // Code inline.
            "prose-code:before:content-none prose-code:after:content-none",

            // Code blocks.
            //
            // NOTE: there are additional styles in `base.css` which target
            // custom class names generated by the `codeSnippets` plugin, which
            // can't be targeted here (e.g. to style highlighted lines). Search
            // for CSS blocks named "Code snippets" to find them.
            "prose-pre:m-0 prose-pre:p-0 prose-pre:py-4 prose-pre:prose-base prose-pre:leading-normal prose-pre:rounded-none prose-pre:focusable",

            // Misc.
            "prose-hr:my-6 prose-hr:sm:my-12",
          ]}
        >
          <p>{description}</p>

          <div class="not-prose">
            <ul class="list-none flex flex-wrap items-center gap-2">
              {
                tagsSorted.map((tag) => {
                  return (
                    <li class="flex">
                      <Tag name={tag}>{tag}</Tag>
                    </li>
                  )
                })
              }
            </ul>
          </div>

          {
            heroImage ? (
              <img
                width={720}
                height={360}
                src={heroImage}
                alt={heroImageAlt}
              />
            ) : (
              <hr />
            )
          }

          <div class="not-prose">
            <!-- Custom (hidden) heading so we can link to it from ToC. -->
            <a
              id="introduction"
              href="#introduction"
              aria-hidden="true"
              tabindex="-1"
              class="focus:outline-none focus-visible:outline-none"
            >
              <h2 class="sr-only">Introduction</h2>
            </a>
          </div>

          <slot />

          <Webmentions
            client:visible
            source={makePostLink(Astro.url.toString(), url)}
          />

          <hr />

          <p class="page-subtext text-center">
            Thanks for reading!
            <br />
            If you have ideas how to improve this post, let me know on <a
              href={makeIssueLink(Astro.url.toString(), url)}
              title="Open issue on GitHub">GitHub</a
            >.
          </p>

          {
            updatedDate && (
              <p class="page-subtext text-center">
                Post last updated <Time datetime={updatedDate} />
              </p>
            )
          }
        </div>
      </article>
    </div>

    <div
      slot="footer"
      class="flex-1 flex items-center flex-row-reverse gap-5 px-2"
    >
      <div class="flex items-center gap-1 truncate">
        <span class="inline-block">
          <svg
            xmlns="http://www.w3.org/2000/svg"
            viewBox="0 0 20 20"
            fill="currentcolor"
            class="w-4 h-4"
          >
            <path
              fill-rule="evenodd"
              d="M10 18a8 8 0 100-16 8 8 0 000 16zm.75-13a.75.75 0 00-1.5 0v5c0 .414.336.75.75.75h4a.75.75 0 000-1.5h-3.25V5z"
              clip-rule="evenodd"></path>
          </svg>
        </span>

        <span class="inline-block truncate" title={readingTime}>
          {readingTime}
        </span>
      </div>
    </div>
  </Window>
</PageLayout>

<script>
  // ToCHighlight highlights the "active" heading in the ToC.
  class ToCHighlight extends HTMLElement {
    constructor() {
      super()

      const scrollContainer = document.getElementById("window-scroll-container")
      if (!scrollContainer) {
        return
      }

      const activeClassName = "toc-active"
      const headingIds = this.dataset?.headingIds?.split(",") || []

      let activeId: string = headingIds[0]
      let visibleIds: string[] = []
      let lastScrollY = 0

      const observer = new IntersectionObserver(
        (headings) => {
          headings.forEach((heading) => {
            const { target, isIntersecting } = heading
            const id = target.id
            const isScrollDown = scrollContainer.scrollTop >= lastScrollY

            lastScrollY = scrollContainer.scrollTop

            if (isIntersecting) {
              isScrollDown ? visibleIds.push(id) : visibleIds.unshift(id)
            } else {
              visibleIds = visibleIds.filter((vid) => vid !== id)
            }

            if (visibleIds.length) {
              // When there's 1 or more visible heading, the first will always
              // be active.
              activeId = visibleIds[0]
            } else if (!isScrollDown) {
              // When there are no visible headings after scrolling up, the
              // previously active heading becomes active.
              const idx = headingIds.indexOf(id)
              const lastIdx = idx > 0 ? idx - 1 : 0
              const lastId = headingIds[lastIdx]
              activeId = lastId
            }

            headingIds.forEach((hid) => {
              const link = document.getElementById(`toc-${hid}`)
              link?.classList.remove(activeClassName)
            })

            const link = document.getElementById(`toc-${activeId}`)
            link?.classList.add(activeClassName)
          })
        },
        {
          root: scrollContainer,
          rootMargin: "0px",
          threshold: [1],
        }
      )

      headingIds.forEach((id) => {
        const el = document.getElementById(id)
        if (el) {
          observer.observe(el)
        }
      })
    }
  }

  customElements.define("toc-highlight", ToCHighlight)
</script>
